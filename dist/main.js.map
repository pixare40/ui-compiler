{"mappings":";;;;;;;UCAY;;;;;;;GAAA,8CAAA;AAcZ,SAAS,8BAAQ,IAAY;IAC3B,OAAO,WAAW,IAAI,CAAC;AACzB;AAEA,SAAS,8BAAQ,IAAY;IAC3B,OAAO,QAAQ,IAAI,CAAC;AACtB;AAEA,SAAS,kCAAY,IAAY;IAC/B,OAAO,KAAK,IAAI,CAAC;AACnB;AAEA,SAAS,qCAAe,IAAY;IAClC,OAAO,8BAAQ,SAAS,8BAAQ;AAClC;AAEO,SAAS,0CAAS,KAAa;IACpC,MAAM,SAAkB,EAAE;IAC1B,IAAI,SAAS;IAEb,MAAO,SAAS,MAAM,MAAM,CAAE;QAC5B,MAAM,OAAO,KAAK,CAAC,OAAO;QAE1B,IAAI,SAAS,KAAK;YAChB,OAAO,IAAI,CAAC;gBAAE,IAAI;gBAAuB,OAAO;YAAI;YACpD;YACA;QACF;QAEA,IAAI,SAAS,KAAK;YAChB,OAAO,IAAI,CAAC;gBAAE,IAAI;gBAAwB,OAAO;YAAI;YACrD;YACA;QACF;QAEA,IAAI,SAAS,KAAK;YAChB,OAAO,IAAI,CAAC;gBAAE,IAAI;gBAAuB,OAAO;YAAI;YACpD;YACA;QACF;QAEA,IAAI,SAAS,KAAK;YAChB,OAAO,IAAI,CAAC;gBAAE,IAAI;gBAAwB,OAAO;YAAI;YACrD;YACA;QACF;QAEA,IAAI,qCAAe,OAAO;YACxB,IAAI,QAAQ;YACZ,MAAO,qCAAe,KAAK,CAAC,OAAO,EAAG;gBACpC,SAAS,KAAK,CAAC,OAAO;gBACtB;YACF;YACA,OAAO,IAAI,CAAC;gBAAE,IAAI;uBAAwB;YAAM;YAChD;QACF;QAEA,OAAO,IAAI,CAAC;YAAE,IAAI;YAAiB,OAAO;QAAM;QAChD,6CAA6C;QAC7C;IACF;IAEA,OAAO;AACT","sources":["src/index.ts","src/lexer.ts"],"sourcesContent":["export { tokenize } from \"./lexer\";\n","export enum TokenType {\n  OpenParen = \"OpenParen\",\n  CloseParen = \"CloseParen\",\n  Identifier = \"Identifier\",\n  CurlyOpen = \"CurlyOpen\",\n  CurlyClose = \"CurlyClose\",\n  EOF = \"EOF\",\n}\n\nexport interface Token {\n  type: string;\n  value: string;\n}\n\nfunction isAlpha(char: string): boolean {\n  return /[a-zA-Z]/.test(char);\n}\n\nfunction isDigit(char: string): boolean {\n  return /[0-9]/.test(char);\n}\n\nfunction isSkippable(char: string): boolean {\n  return /\\s/.test(char);\n}\n\nfunction isAlphaNumeric(char: string): boolean {\n  return isAlpha(char) || isDigit(char);\n}\n\nexport function tokenize(input: string): Token[] {\n  const tokens: Token[] = [];\n  let cursor = 0;\n\n  while (cursor < input.length) {\n    const char = input[cursor];\n\n    if (char === \"(\") {\n      tokens.push({ type: TokenType.OpenParen, value: \"(\" });\n      cursor++;\n      continue;\n    }\n\n    if (char === \")\") {\n      tokens.push({ type: TokenType.CloseParen, value: \")\" });\n      cursor++;\n      continue;\n    }\n\n    if (char === \"{\") {\n      tokens.push({ type: TokenType.CurlyOpen, value: \"{\" });\n      cursor++;\n      continue;\n    }\n\n    if (char === \"}\") {\n      tokens.push({ type: TokenType.CurlyClose, value: \"}\" });\n      cursor++;\n      continue;\n    }\n\n    if (isAlphaNumeric(char)) {\n      let value = \"\";\n      while (isAlphaNumeric(input[cursor])) {\n        value += input[cursor];\n        cursor++;\n      }\n      tokens.push({ type: TokenType.Identifier, value });\n      continue;\n    }\n\n    tokens.push({ type: TokenType.EOF, value: \"EOF\" });\n    //console.log('Unexpected character:', char);\n    cursor++;\n  }\n\n  return tokens;\n}\n"],"names":[],"version":3,"file":"main.js.map"}